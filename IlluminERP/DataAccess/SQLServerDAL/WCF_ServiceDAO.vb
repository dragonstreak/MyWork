'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports DataAccess.Components
Imports DataAccess.IDAL
Imports DataAccess.Model
Imports Microsoft.ApplicationBlocks.Data
Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports System.Text

Namespace SQLServerDAL
    
    Friend Class WCF_ServiceDAO
        Inherits BaseSqlServerDAO
        Implements IWCF_Service
        
        Public Sub New(ByVal factory As SqlServerFactory)
            MyBase.New(factory)
        End Sub
        
        Public Overridable Function GetEntityById(ByVal Id As Integer) As WCF_ServiceInfo Implements IWCF_Service.GetEntityById
            Dim paramlevel As New SqlParameter("@ID", SqlDbType.Int)
            paramlevel.Value = Id
            Dim sql As String = "select * from [t_WCF_Service] where ID = @ID "
            Dim ds As DataSet = Me.ExecuteDataSet(CommandType.Text, sql, paramlevel)
            If Not ds Is Nothing AndAlso ds.Tables(0).Rows.Count > 0 Then
                Return MapRowToEntityInfo(ds.Tables(0).Rows(0))
            Else
                Return Nothing
            End If
        End Function

        Public Overridable Function GetWCFServiceByType(ByVal serviceType As String) As WCF_ServiceInfo Implements IWCF_Service.GetWCFServiceByType
            Dim paramServiceType As New SqlParameter("@ServiceType", SqlDbType.VarChar)
            paramServiceType.Value = serviceType
            Dim sql As String = "select * from [t_WCF_Service] where ServiceType = @ServiceType "
            Dim ds As DataSet = Me.ExecuteDataSet(CommandType.Text, sql, paramServiceType)
            If Not ds Is Nothing AndAlso ds.Tables(0).Rows.Count > 0 Then
                Return MapRowToEntityInfo(ds.Tables(0).Rows(0))
            Else
                Return Nothing
            End If

        End Function

        Public Overridable Sub DeleteEntityById(ByVal Id As Integer) Implements IWCF_Service.DeleteEntityById
            Dim strSql As String = "delete from t_WCF_Service where id= @ID"
            Dim parameter As New SqlParameter
            parameter.ParameterName = "@ID"
            parameter.Value = Id
            ExecuteNonQuery(strSql, parameter)
        End Sub

        Public Overridable Function GetEntityDataSet() As DataSet Implements IWCF_Service.GetEntityDataSet
            Dim sql As String = "select * from [t_WCF_Service] "
            Dim ds As DataSet = Me.ExecuteDataSet(CommandType.Text, sql)
            Return ds
        End Function

        Public Overridable Function GetAllWCFService() As List(Of WCF_ServiceInfo) Implements IWCF_Service.GetAllWCFService
            Dim dsWCFService As DataSet
            dsWCFService = GetEntityDataSet()
            If dsWCFService Is Nothing Then
                Return Nothing
            End If

            Dim serviceList As New List(Of WCF_ServiceInfo)
            For Each dr As DataRow In dsWCFService.Tables(0).Rows
                serviceList.Add(MapRowToEntityInfo(dr))
            Next

            Return serviceList
        End Function

        Public Function MapRowToEntityInfo(ByVal dr As DataRow) As WCF_ServiceInfo
            Dim entityInfo As New WCF_ServiceInfo

            entityInfo.Id = Convert.ToInt32(dr("ID"))

            If Not Convert.IsDBNull(dr("Service_id")) Then
                entityInfo.Service_id = Convert.ToInt32(dr("Service_id"))
            End If

            If Not Convert.IsDBNull(dr("SiteVersion")) Then
                entityInfo.SiteVersion = dr("SiteVersion").ToString()
            End If

            If Not Convert.IsDBNull(dr("ServiceName")) Then
                entityInfo.ServiceName = dr("ServiceName").ToString()
            End If

            If Not Convert.IsDBNull(dr("ServiceType")) Then
                entityInfo.ServiceType = dr("ServiceType").ToString()
            End If

            If Not Convert.IsDBNull(dr("CustomServiceHostType")) Then
                entityInfo.CustomServiceHostType = dr("CustomServiceHostType").ToString()
            End If

            If Not Convert.IsDBNull(dr("ServiceBehaviorXml")) Then
                entityInfo.ServiceBehaviorXml = dr("ServiceBehaviorXml").ToString()
            End If

            If Not Convert.IsDBNull(dr("ServiceHostXml")) Then
                entityInfo.ServiceHostXml = dr("ServiceHostXml").ToString()
            End If

            If Not Convert.IsDBNull(dr("InsertDate")) Then
                entityInfo.InsertDate = Convert.ToDateTime(dr("InsertDate"))
            End If

            If Not Convert.IsDBNull(dr("InsertBy")) Then
                entityInfo.InsertBy = dr("InsertBy").ToString()
            End If

            If Not Convert.IsDBNull(dr("UpdateDate")) Then
                entityInfo.UpdateDate = Convert.ToDateTime(dr("UpdateDate"))
            End If

            If Not Convert.IsDBNull(dr("UpdateBy")) Then
                entityInfo.UpdateBy = dr("UpdateBy").ToString()
            End If

            Return entityInfo
        End Function

    End Class
End Namespace
