'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.225
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports DataAccess.Components
Imports DataAccess.IDAL
Imports DataAccess.Model
Imports Microsoft.ApplicationBlocks.Data
Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports System.Text
Imports Utils

Namespace SQLServerDAL
    
    Friend Class PMS_OperationCostDAO
        Inherits BaseSqlServerDAO
        Implements IPMS_OperationCost
        
        Public Sub New(ByVal factory As SqlServerFactory)
            MyBase.New(factory)
        End Sub
        
        Public Overridable Function SaveEntity(ByVal entity As PMS_OperationCost) As Integer Implements IPMS_OperationCost.SaveEntity
            Dim paramList As New List(Of SqlParameter)
            Dim Id_parameter = New SqlParameter("@Id", SqlDbType.Int)
            If entity.Id > 0 Then
              Id_parameter.Value = entity.Id
            Else
              Id_parameter.Value = DBNull.Value
            End If
            Dim TotalCost_parameter As New SqlParameter("@TotalCost", SqlDbType.Decimal)
            TotalCost_parameter.Value = entity.TotalCost
            paramList.Add(TotalCost_parameter)
            Dim SampleSize_parameter As New SqlParameter("@SampleSize", SqlDbType.Decimal)
            SampleSize_parameter.Value = entity.SampleSize
            paramList.Add(SampleSize_parameter)
            Dim AverageCostPerSample_parameter As New SqlParameter("@AverageCostPerSample", SqlDbType.Decimal)
            AverageCostPerSample_parameter.Value = entity.AverageCostPerSample
            paramList.Add(AverageCostPerSample_parameter)
            Dim CostDiff_parameter As New SqlParameter("@CostDiff", SqlDbType.Decimal)
            CostDiff_parameter.Value = entity.CostDiff
            paramList.Add(CostDiff_parameter)
            Dim CostName_parameter As New SqlParameter("@CostName", SqlDbType.NVarChar, 100)
            CostName_parameter.Value = entity.CostName
            paramList.Add(CostName_parameter)
            Dim CostType_parameter As New SqlParameter("@CostType", SqlDbType.NVarChar, 10)
            CostType_parameter.Value = entity.CostType
            paramList.Add(CostType_parameter)
            Dim CostingFileId_parameter = New SqlParameter("@CostingFileId", SqlDbType.Int)
            CostingFileId_parameter.Value = entity.CostingFileId
            paramList.Add(CostingFileId_parameter)
            Dim ComponentId_parameter = New SqlParameter("@ComponentId", SqlDbType.Int)
            ComponentId_parameter.Value = entity.ComponentId
            paramList.Add(ComponentId_parameter)
            Dim sql As String = ""
            Dim identityParameter As New SqlParameter("@IdentityId", SqlDbType.Int)
            If (entity.id = -1) Then
                identityParameter.Direction = ParameterDirection.Output
                paramList.Add(identityParameter)
                sql = "insert into t_PMS_OperationCost(TotalCost,SampleSize,AverageCostPerSample,CostDiff,CostName,CostType,CostingFileId,ComponentId) "
                sql += "values(@TotalCost,@SampleSize,@AverageCostPerSample,@CostDiff,@CostName,@CostType,@CostingFileId,@ComponentId) Select @IdentityId = @@identity  "
            Else
                paramList.Add(Id_parameter)
                sql = "update t_PMS_OperationCost set TotalCost = @TotalCost,SampleSize = @SampleSize,AverageCostPerSample = @AverageCostPerSample,CostDiff = @CostDiff,CostName = @CostName,CostType = @CostType,CostingFileId = @CostingFileId,ComponentId = @ComponentId where Id =@Id"
            End If
            Dim count As Integer
            count = Me.ExecuteNonQuery(sql, paramList.ToArray())
            If (entity.Id = -1) Then
                If Not identityParameter Is Nothing Then
                    entity.Id = Integer.Parse(identityParameter.Value)
                End If
            End If
            Return count
        End Function

        Public Overridable Function GetEntityById(ByVal Id As Integer) As PMS_OperationCost Implements IPMS_OperationCost.GetEntityById
            Dim param As New SqlParameter("@Id", SqlDbType.Int)
            param.Value = Id
            Dim strSQL As String = "select *,0 as EstimateCost from [t_PMS_OperationCost] where Id = @Id "
            Dim dr As SqlClient.SqlDataReader
            Try
                dr = Me.ExecuteReader(CommandType.Text, strSQL, param)
                If (dr.Read()) Then
                    Dim entity As New PMS_OperationCost
                    ColumnMappingManage.MappingEntityByDataReader(Of PMS_OperationCost)(entity, dr)
                    Return entity
                Else
                    Return Nothing
                End If
            Catch ex As Exception
                Return Nothing
            Finally
                If (Not dr.IsClosed) Then
                    dr.Close()
                End If
            End Try
        End Function

        Public Overridable Sub DeleteEntity(ByVal Id As Integer) Implements IPMS_OperationCost.DeleteEntity
            Dim strSql As String = "delete from t_PMS_OperationCost where Id= @Id"
            Dim parameter As New SqlParameter
            parameter.ParameterName = "@Id"
            parameter.Value = Id
            Me.ExecuteNonQuery(strSql, parameter)
        End Sub

        Public Overridable Function GetEntityDataSet() As DataSet Implements IPMS_OperationCost.GetEntityDataSet
            Dim sql As String = "select * from [t_PMS_OperationCost] "
            Dim ds As DataSet = Me.ExecuteDataSet(CommandType.Text, sql)
            Return ds
        End Function

        Public Overridable Function GetEntityList() As List(Of PMS_OperationCost) Implements IPMS_OperationCost.GetEntityList
            Dim strSQL As String = "select *,0 as EstimateCost from [t_PMS_OperationCost] "
            Dim dr As SqlClient.SqlDataReader
            Try
                dr = Me.ExecuteReader(CommandType.Text, strSQL)
                Dim entityList As New List(Of PMS_OperationCost)
                ColumnMappingManage.MappingListByDataReader(entityList, dr)
                Return entityList
            Catch ex As Exception
                Return Nothing
            Finally
                If (Not dr.IsClosed) Then
                    dr.Close()
                End If
            End Try
        End Function
        Public Overridable Function GetComponentCostList(ByVal costType As String, ByVal componentId As Integer) As List(Of PMS_OperationCost) Implements IPMS_OperationCost.GetComponentCostList
            Dim strSQL As String = "select * from [t_PMS_OperationCost] where componentId = @ComponentId and (@CostType = 'ALL' or CostType = @CostType ) order by id"
            Dim componentIdParameter As New SqlParameter
            componentIdParameter.ParameterName = "@ComponentId"
            componentIdParameter.Value = componentId
            Dim CostTypeParameter As New SqlParameter
            CostTypeParameter.ParameterName = "@CostType"
            CostTypeParameter.Value = costType
            Dim dr As SqlClient.SqlDataReader
            Try
                dr = Me.ExecuteReader(CommandType.Text, strSQL, componentIdParameter, CostTypeParameter)
                Dim entityList As New List(Of PMS_OperationCost)
                ColumnMappingManage.MappingListByDataReader(entityList, dr)
                Return entityList
            Catch ex As Exception
                Return Nothing
            Finally
                If (Not dr.IsClosed) Then
                    dr.Close()
                End If
            End Try
        End Function
        Function GetProjectCostList(ByVal costType As String, ByVal jobNumber As String) As DataSet Implements IPMS_OperationCost.GetProjectCostList
            Dim sql As String = "select t_PMS_OperationCost.*,t_PMS_Component.ComponentName  from t_PMS_OperationCost,t_PMS_Component  "
            sql += " where t_PMS_OperationCost.componentId = t_PMS_Component.id  and (@CostType = 'ALL' or CostType = @CostType ) and t_PMS_Component.Jobnumber =@JobNumber"
            Dim jobNumberParameter As New SqlParameter
            jobNumberParameter.ParameterName = "@JobNumber"
            jobNumberParameter.Value = jobNumber
            Dim CostTypeParameter As New SqlParameter
            CostTypeParameter.ParameterName = "@CostType"
            CostTypeParameter.Value = costType
            Dim ds As DataSet = Me.ExecuteDataSet(CommandType.Text, sql, jobNumberParameter, CostTypeParameter)
            Return ds
        End Function
        ''' <summary>
        ''' This is the method to get project info, component info, cost detail
        ''' </summary>
        ''' <param name="costType"></param>
        ''' <param name="jobNumber"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetProjectAndCostDetail(ByVal costType As String, ByVal jobNumber As String) As DataSet Implements IPMS_OperationCost.GetProjectAndCostDetail
            Dim storeProcedureName As String = "GetProjectCostingDetail"
            Try
                Dim jobNumberParameter As New SqlParameter
                jobNumberParameter.ParameterName = "@JobNumber"
                jobNumberParameter.Value = jobNumber
                Dim CostTypeParameter As New SqlParameter
                CostTypeParameter.ParameterName = "@CostType"
                CostTypeParameter.Value = costType
                Dim resultDataSet As DataSet = Me.ExecuteDataSet(CommandType.StoredProcedure, storeProcedureName, jobNumberParameter, CostTypeParameter)
                Return resultDataSet
            Catch ex As Exception
                Return Nothing
            End Try

        End Function
        ''' <summary>
        ''' This is the method to get project profit.
        ''' </summary>
        ''' <param name="JobNumber"></param>
        ''' <param name="CostType">It will be 'Actual'</param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function GetProjectProfit(ByVal JobNumber As String, ByVal CostType As String) As List(Of PMS_OperationCost) Implements IPMS_OperationCost.GetProjectProfit
            CostType = "Actual"
            Dim jobNumberParameter As New SqlParameter
            jobNumberParameter.ParameterName = "@JobNumber"
            jobNumberParameter.Value = JobNumber
            Dim CostTypeParameter As New SqlParameter
            CostTypeParameter.ParameterName = "@CostType"
            CostTypeParameter.Value = CostType

            Dim storeProcedureName As String = "GetProjectProfit"
            Dim dr As SqlClient.SqlDataReader
            Try
                dr = Me.ExecuteReader(CommandType.StoredProcedure, storeProcedureName, jobNumberParameter, CostTypeParameter)
                If (dr.Read()) Then
                    Dim entityList As New List(Of PMS_OperationCost)
                    ColumnMappingManage.MappingListByDataReader(entityList, dr)
                    Return entityList
                Else
                    Return Nothing
                End If
            Catch ex As Exception
                Return Nothing
            Finally
                If (Not dr.IsClosed) Then
                    dr.Close()
                End If
            End Try
        End Function
    End Class
End Namespace
