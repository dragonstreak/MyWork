'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports DataAccess.Components
Imports DataAccess.IDAL
Imports DataAccess.Model
Imports Utils
Imports Microsoft.ApplicationBlocks.Data
Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports System.Text

Namespace SQLServerDAL
    
    Friend Class Base_ListItemDAO
        Inherits BaseSqlServerDAO
        Implements IBase_ListItem

        Public Sub New(ByVal factory As SqlServerFactory)
            MyBase.New(factory)
        End Sub

        Public Function AddEnttiy(ByVal entity As Base_ListItem) As Integer Implements IBase_ListItem.AddEntity
            ExecuteNonQuery(entity.SqlScript_Insert, entity.GetSqlParameters())
            Return entity.NewIdentifyId
        End Function

        Public Function UpdateEntity(ByVal entity As Base_ListItem) As Boolean Implements IBase_ListItem.UpdateEntity
            Dim referCount As Integer
            referCount = ExecuteNonQuery(entity.SqlScript_Update, entity.GetSqlParameters())
            Return referCount > 0
        End Function

        Public Overridable Function GetEntityById(ByVal Id As Integer) As Base_ListItem Implements IBase_ListItem.GetEntityById
            Dim paramlevel As New SqlParameter("@ListItemID", SqlDbType.Int)
            paramlevel.Value = Id
            Dim sql As String = "select * from [t_Base_ListItem] where IsDeleted = 0 and ListItemID = @ListItemID "
            Dim ds As DataSet = Me.ExecuteDataSet(CommandType.Text, sql, paramlevel)
            If Not ds Is Nothing AndAlso ds.Tables(0).Rows.Count > 0 Then
                Return MapRowToListItme(ds.Tables(0).Rows(0))
            Else
                Return Nothing
            End If
        End Function

        Public Overridable Sub DeleteEntityById(ByVal Id As Integer) Implements IBase_ListItem.DeleteEntityById
            Dim strSql As String = "update t_Base_ListItem set IsDeleted = 0 where ListItemID = @ListItemID"
            Dim parameter As New SqlParameter
            parameter.ParameterName = "@ListItemID"
            parameter.Value = Id
            ExecuteNonQuery(strSql, parameter)
        End Sub

        Public Overridable Function GetEntityList(ByVal filter As ListItemQueryFilter) As DataTable Implements IBase_ListItem.GetEntityList
            Dim sql As String = "select ListItem.* from [t_Base_ListItem] ListItem where ListItem.IsDeleted = 0 "
            sql += FilterManager.GetFilterCondition(Of ListItemQueryFilter)(filter)
            sql += " Order by ListItem.Type, ListItem.ContentText "
            Dim parameters() As SqlParameter = {
              New SqlParameter("@ContentText", filter.Content),
               New SqlParameter("@Type", filter.Type)
            }
            Dim ds As DataSet = Me.ExecuteDataSet(CommandType.Text, sql, parameters)
           
            Return ds.Tables(0)
        End Function

        Public Function IsEntityExist(ByVal entity As Base_ListItem) As Boolean Implements IBase_ListItem.IsEntityExist
            Dim sql As String = "select * from t_Base_ListItem "
            sql += "where IsDeleted = 0 and ListItemID != @ListItemID and ContentText = @ContentText and Type = @Type"

            Dim ds As DataSet = ExecuteDataSet(sql, entity.GetSqlParameters())
            If ds IsNot Nothing AndAlso ds.Tables(0).Rows.Count > 0 Then
                Return True
            Else
                Return False
            End If
        End Function

        Public Function MapRowToListItme(ByVal dr As DataRow) As Base_ListItem
            If dr Is Nothing Then
                Throw New IlluminDataAccessException("Data Row is null, can't change it to an Entity instance!")
            End If
            Dim listItem As New Base_ListItem
            listItem.ListItemID = Convert.ToInt32(dr("ListItemID"))

            If Not Convert.IsDBNull(dr("Type")) Then
                listItem.Type = Convert.ToInt32(dr("Type"))
            Else
                listItem.Type = 0
            End If

            If Not Convert.IsDBNull(dr("ContentText")) Then
                listItem.ContentText = dr("ContentText").ToString()
            Else
                listItem.ContentText = Nothing
            End If

            If Not Convert.IsDBNull(dr("ParentID")) Then
                listItem.ParentID = Convert.ToInt32(dr("ParentID"))
            Else
                listItem.ParentID = 0
            End If

            If Not Convert.IsDBNull(dr("IsDeleted")) Then
                listItem.IsDeleted = Convert.ToInt32(dr("IsDeleted"))
            Else
                listItem.IsDeleted = 0
            End If

            Return listItem
        End Function

    End Class
End Namespace
