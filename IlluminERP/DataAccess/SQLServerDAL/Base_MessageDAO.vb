'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.225
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports DataAccess.Components
Imports DataAccess.IDAL
Imports DataAccess.Model
Imports Microsoft.ApplicationBlocks.Data
Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports System.Text
Imports Utils

Namespace SQLServerDAL

    Friend Class Base_MessageDAO
        Inherits BaseSqlServerDAO
        Implements IBase_Message
        Private messageFactory As SqlServerFactory
        Public Sub New(ByVal factory As SqlServerFactory)

            MyBase.New(factory)
            messageFactory = factory

        End Sub
        ''' <summary>
        ''' This method is used to get message entity by id.
        ''' </summary>
        ''' <param name="Id"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Overridable Function GetEntityById(ByVal Id As Integer) As Object Implements IBase_Message.GetEntityById
            Dim paramlevel As New SqlParameter("@ID", SqlDbType.Int)
            paramlevel.Value = Id
            Dim sql As String = "select * from [t_Base_Message] where ID = @ID "
            sql += " select * from t_Base_MessageReceiver where message_id=@ID"
            Dim ds As DataSet = Me.ExecuteDataSet(CommandType.Text, sql, paramlevel)
            If Not ds Is Nothing Then
                Return ds
            Else
                Return Nothing
            End If
        End Function
        ''' <summary>
        ''' This method is used to delete messge entity.
        ''' </summary>
        ''' <param name="Id">Pass the message id.</param>
        ''' <remarks></remarks>
        Public Overridable Sub DeleteEntity(ByVal Id As Integer) Implements IBase_Message.DeleteEntity
            Try
                messageFactory.BeginTransaction()
                Dim strSql As String = " delete from  t_Base_MessageReceiver where message_id=@Message_id"
                Dim parameter As New SqlParameter
                parameter.ParameterName = "@Message_id"
                parameter.Value = Id
                Me.ExecuteNonQuery(strSql, parameter)

                strSql = "delete from t_Base_Message where id= @ID"
                Dim idParameter As New SqlParameter
                idParameter.ParameterName = "@id"
                idParameter.Value = Id
                Me.ExecuteNonQuery(strSql, idParameter)
                messageFactory.Commit()
            Catch ex As Exception
                messageFactory.Rollback()
            End Try
           
        End Sub
        ''' <summary>
        ''' This method is used to get all message list.
        ''' </summary>
        ''' <returns>Return message list dataset.</returns>
        ''' <remarks></remarks>
        Public Overridable Function GetEntityDataSet() As DataSet Implements IBase_Message.GetEntityDataSet
            Dim sql As String = "select * from [t_Base_Message] "
            Dim ds As DataSet = Me.ExecuteDataSet(CommandType.Text, sql)
            Return ds
        End Function
        ''' <summary>
        ''' This function is used to save message.
        ''' </summary>
        ''' <param name="message">Pass the mssage entity object.</param>
        ''' <returns>If save succesfully, return message id, else return 0.</returns>
        ''' <remarks></remarks>
        Public Overridable Function SaveMessage(ByVal message As Base_Message) As Integer Implements IBase_Message.SaveMessage
            Dim messageSQL As String = "insert into t_Base_Message(message_content,message_subject,message_sender_id,message_sender,message_status,message_time,message_type,message_receivers)"
            messageSQL += " values(@message_content,@message_subject,@message_sender_id,@message_sender,@message_status,@message_time,@message_type,@message_receivers)  Select Id =@@Identity"
            'define the parameter for message
            Dim contentParameter As New SqlParameter("@message_content", SqlDbType.VarChar, 5000)
            contentParameter.Value = message.message_content
            Dim subjectParameter As New SqlParameter("@message_subject", SqlDbType.VarChar, 500)
            subjectParameter.Value = message.message_subject
            Dim senderIdParameter As New SqlParameter("@message_sender_id", SqlDbType.Int)
            senderIdParameter.Value = message.message_sender_id
            Dim senderParameter As New SqlParameter("@message_sender", SqlDbType.VarChar, 50)
            senderParameter.Value = message.message_sender
            Dim statusParameter As New SqlParameter("@message_status", SqlDbType.Int)
            statusParameter.Value = message.message_status
            Dim timeParameter As New SqlParameter("@message_time", SqlDbType.DateTime)
            timeParameter.Value = message.message_time
            Dim typeParameter As New SqlParameter("@message_type", SqlDbType.VarChar)
            typeParameter.Value = message.message_type
            Dim receiversParameter As New SqlParameter("@message_receivers", SqlDbType.VarChar, 500)
            receiversParameter.Value = message.message_receivers

            'define the parameter for message receiver
            Dim messageIdParameter As New SqlParameter("@message_id", SqlDbType.Int)
            Dim messageReceiverIdParameter As New SqlParameter("@message_receiver_id", SqlDbType.Int)
            Dim messageReceiverNameParameter As New SqlParameter("@message_receiver_name", SqlDbType.VarChar, 50)
            Dim receiverStatusParameter As New SqlParameter("@receiver_message_status", SqlDbType.Int)

            messageFactory.BeginTransaction()
            Try
                Dim drMessage As SqlClient.SqlDataReader = Me.ExecuteReader(CommandType.Text, messageSQL, contentParameter, subjectParameter, senderIdParameter, senderParameter, statusParameter, timeParameter, typeParameter, receiversParameter)
                If drMessage.Read Then
                    message.id = Convert.ToInt32(drMessage("Id"))
                    drMessage.Close()
                    drMessage = Nothing

                    Dim i As Integer = 0
                    For Each receiver As Base_MessageReceiver In message.ReceiversList
                        i = i + 1
                        Dim idName As String = "ReceiverId" + i.ToString
                        Dim receiverSQL As String = "insert into t_Base_MessageReceiver (message_id,message_receiver_id,message_receiver_name,receiver_message_status) values(@message_id,@message_receiver_id,@message_receiver_name,@receiver_message_status)  Select " + idName + " =@@Identity"
                        messageIdParameter.Value = message.id
                        messageReceiverIdParameter.Value = receiver.message_receiver_id
                        messageReceiverNameParameter.Value = receiver.message_receiver_name
                        receiverStatusParameter.Value = 3


                        Dim drMessageReceiver As SqlClient.SqlDataReader = Me.ExecuteReader(CommandType.Text, receiverSQL, messageIdParameter, messageReceiverIdParameter, messageReceiverNameParameter, receiverStatusParameter)
                        If drMessageReceiver.Read Then
                            receiver.id = Convert.ToInt32(drMessageReceiver(idName))
                            drMessageReceiver.Close()

                        End If
                    Next
                End If
                messageFactory.Commit()
                Return message.id
            Catch ex As Exception
                messageFactory.Rollback()
                Return 0
            End Try

        End Function
        ''' <summary>
        ''' This function is used to get unread message.
        ''' </summary>
        ''' <param name="userId">Pass user id.</param>
        ''' <returns>Return unread message dataset</returns>
        ''' <remarks></remarks>
        Public Function GetUnreadMessage(ByVal userId As Integer) As DataSet
            Dim strSQL As String = "select * from t_Base_Message where message_status>0 and exists(select 1 from t_Base_MessageReceiver where message_id = t_Base_Message.id and message_receiver_id=@receiver_id)"
            Dim receiverParameter As New SqlParameter("receiver_id", SqlDbType.Int)
            receiverParameter.Value = userId
            Dim ds As DataSet = Me.ExecuteDataSet(CommandType.Text, strSQL, receiverParameter)

            If Not ds Is Nothing Then
                Return ds
            Else
                Return Nothing
            End If
        End Function
        ''' <summary>
        ''' This function is used to get unremined message,
        ''' after get the unremined message, set them to reminded(message_status to 2)
        ''' </summary>
        ''' <param name="userId">Pass the user id.</param>
        ''' <returns>Return message list dataset.</returns>
        ''' <remarks></remarks>
        Public Function GetUnremindMessage(ByVal userId As Integer) As DataSet Implements IBase_Message.GetUnremindMessage
            Try
                Dim strSQL As String = "select * from t_Base_Message where  exists(select 1 from t_Base_MessageReceiver where receiver_message_status in(0,3) and message_id = t_Base_Message.id and message_receiver_id=@receiver_id) order by t_Base_Message.id desc"
                Dim receiverParameter As New SqlParameter("@receiver_id", SqlDbType.Int)
                receiverParameter.Value = userId
                Dim ds As DataSet = Me.ExecuteDataSet(CommandType.Text, strSQL, receiverParameter)

                If Not ds Is Nothing Then
                    'If ds.Tables.Count > 0 And ds.Tables(0).Rows.Count > 0 Then
                    '    Dim ids As String = ""
                    '    For Each messageRow As DataRow In ds.Tables(0).Rows
                    '        ids += messageRow("id").ToString() + ","
                    '    Next
                    '    ids = ids.Substring(0, ids.Length - 1)
                    '    'Dim parameter As New SqlParameter("@ids", SqlDbType.VarChar, 500)
                    '    Dim parameters As New SqlParameter("@message_receiver_id", SqlDbType.Int)
                    '    parameters.Value = userId
                    '    strSQL = "update t_Base_MessageReceiver set receiver_message_status=0 where message_id in(" + ids + ") and message_receiver_id=@message_receiver_id"

                    '    Me.ExecuteNonQuery(strSQL, parameters)
                    'End If
                    Return ds
                Else
                    Return Nothing
                End If
            Catch ex As Exception
                Return Nothing
            End Try

        End Function

        ''' <summary>
        ''' This function is used to set message status to read.
        ''' </summary>
        ''' <param name="messageId">Pass the message id.</param>
        ''' <returns>Return set succesfully or not.</returns>
        ''' <remarks></remarks>
        Public Function SetMessageRead(ByVal messageId As Integer) As Boolean Implements IBase_Message.SetMessageRead
            Dim strSQL As String = "update t_Base_Message set message_status=0 where id=@id"
            Dim idParameter As New SqlParameter("@id", SqlDbType.Int)
            idParameter.Value = messageId
            Return Me.ExecuteNonQuery(strSQL, idParameter) > 0

        End Function

        ''' <summary>
        ''' This function is used to get user message list.
        ''' </summary>
        ''' <param name="userId">Pass the user id.</param>
        ''' <returns>Return message list dataset.</returns>
        ''' <remarks></remarks>
        Public Function GetUserMessageList(ByVal userId As Integer) As DataSet Implements IBase_Message.GetUserMessageList

            Dim strSQL As String = "select * from t_Base_Message where exists(select 1 from t_Base_MessageReceiver where message_id = t_Base_Message.id and message_receiver_id=@receiver_id)"
            Dim receiverParameter As New SqlParameter("@receiver_id", SqlDbType.Int)
            receiverParameter.Value = userId
            Dim ds As DataSet = Me.ExecuteDataSet(CommandType.Text, strSQL, receiverParameter)
            If Not ds Is Nothing Then
                Return ds
            Else
                Return Nothing
            End If
        End Function
        Public Function GetUserMessage(ByVal userId As Integer) As List(Of Base_Message) Implements IBase_Message.GetUserMessage
            Dim strSQL As String = "select * from t_Base_Message where exists(select 1 from t_Base_MessageReceiver where message_id = t_Base_Message.id and message_receiver_id=@receiver_id)"
            Dim receiverParameter As New SqlParameter("@receiver_id", SqlDbType.Int)
            receiverParameter.Value = userId
            Dim dr As SqlClient.SqlDataReader
            Try
                dr = Me.ExecuteReader(CommandType.Text, strSQL, receiverParameter)
                'Dim entity As New Base_Message
                'ColumnMappingManage.MappingEntityByDataReader(Of Base_Message)(entity, dr)
                Dim messageList As New List(Of Base_Message)
                ColumnMappingManage.MappingListByDataReader(messageList, dr)
                dr.Close()
                Return messageList
            Catch ex As Exception

                Return Nothing

            End Try


        End Function
        Public Function GetMessageListByFilter(ByVal filter As MessageQueryFilter) As DataSet Implements IBase_Message.GetMessageListByFilter
            Dim strSQL As String = "select t_Base_Message.*,t_User_UserInfo.C_Name,t_User_UserInfo.E_Name,t_User_UserInfo.Code  from t_Base_Message, t_User_UserInfo  where(t_Base_Message.message_sender_id = t_User_UserInfo.ID) and exists(select 1 from t_Base_MessageReceiver where message_id = t_Base_Message.id and (@receiver_message_status = '-1' or  receiver_message_status = @receiver_message_status) and message_receiver_id=@receiver_id)"
            strSQL += FilterManager.GetFilterCondition(Of MessageQueryFilter)(filter)


            Dim parameters() As SqlParameter = {
               New SqlParameter("@message_content", filter.MessageContent),
                New SqlParameter("@message_sender", filter.MessageFrom),
               New SqlParameter("@receiver_message_status", filter.ReceiverMessageStatus),
               New SqlParameter("@receiver_id", filter.UserId),
               New SqlParameter("@message_subject", filter.MessageSubject)
             }
            'deal with message status,0 meas
            'If filter.MessageStatus = "0" Then
            '    strSQL += " and t_Base_Message.message_status=0"
            'ElseIf (filter.MessageStatus = "1") Then
            '    strSQL += " and t_Base_Message.message_status>0"
            'End If
            Dim messageList As DataSet = Nothing
            Try
                messageList = Me.ExecuteDataSet(strSQL, parameters)

                Return messageList
            Catch ex As Exception
                Return Nothing
            End Try
        End Function
        ''' <summary>
        ''' This method is used to set message status,
        ''' 0:unreaded
        ''' 1:readed
        ''' 2:deleted
        ''' 3:unremined(need not this)
        ''' </summary>
        ''' <param name="receiverId">Pass the receiver id.</param>
        ''' <param name="messageId">Pass the message id.</param>
        ''' <param name="messageStatus">Pass the message status.</param>
        ''' <remarks></remarks>
        Public Function SetReceiverMessageStatus(ByVal receiverId As Integer, ByVal messageId As Integer, ByVal messageStatus As Integer) As Integer
            Dim strSQL As String = "update t_Base_MessageReceiver set receiver_message_status = @message_status where(message_id = @message_id) and message_receiver_id=@receiver_id"
            Dim parameters() As SqlParameter = {
              New SqlParameter("@message_status", messageStatus),
               New SqlParameter("@message_id", messageId),
              New SqlParameter("@receiver_id", receiverId)
            }
            Try
                Dim count As Integer = Me.ExecuteNonQuery(strSQL, parameters)
                Return count
            Catch ex As Exception
                Return 0
            End Try
        End Function
        ''' <summary>
        ''' This method is used to delete receiver message.
        ''' </summary>
        ''' <param name="receiverId">Pass the receiver id.</param>
        ''' <param name="messageId">Pass the message id.</param>
        ''' <remarks></remarks>
        Public Sub DeleteReceiverMessage(ByVal receiverId As Integer, ByVal messageId As Integer)
            SetReceiverMessageStatus(receiverId, messageId, 2)
        End Sub
        ''' <summary>
        ''' This method is used to set recevier message as readed.
        ''' </summary>
        ''' <param name="receiverId">Pass the reveiver id.</param>
        ''' <param name="messageId">Pass the message id.</param>
        ''' <remarks></remarks>
        Public Sub SetReceiverMessageReaded(ByVal receiverId As Integer, ByVal messageId As Integer) Implements IBase_Message.SetReceiverMessageReaded
            SetReceiverMessageStatus(receiverId, messageId, 1)
        End Sub

    End Class
End Namespace
