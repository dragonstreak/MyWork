'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.225
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports DataAccess.Components
Imports DataAccess.IDAL
Imports DataAccess.Model
Imports Microsoft.ApplicationBlocks.Data
Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports System.Text
Imports Utils

Namespace SQLServerDAL
    
    Friend Class PMS_ProposalStageDAO
        Inherits BaseSqlServerDAO
        Implements IPMS_ProposalStage
        Private stageFactory As SqlServerFactory
        Public Sub New(ByVal factory As SqlServerFactory)
            MyBase.New(factory)
            stageFactory = factory
        End Sub
        
        Public Overridable Function SaveEntity(ByVal entity As PMS_ProposalStage) As Integer Implements IPMS_ProposalStage.SaveEntity
            Dim paramList As New List(Of SqlParameter)
            Dim Id_parameter = New SqlParameter("@Id", SqlDbType.Int)
            If entity.Id > 0 Then
              Id_parameter.Value = entity.Id
            Else
              Id_parameter.Value = DBNull.Value
            End If
            Dim StageNumber_parameter = New SqlParameter("@StageNumber", SqlDbType.Int)
            StageNumber_parameter.Value = entity.StageNumber
            paramList.Add(StageNumber_parameter)
            Dim StageName_parameter As New SqlParameter("@StageName", SqlDbType.NVarChar, 400)
            StageName_parameter.Value = entity.StageName
            paramList.Add(StageName_parameter)
            Dim Description_parameter As New SqlParameter("@Description", SqlDbType.NVarChar, 400)
            Description_parameter.Value = entity.Description
            paramList.Add(Description_parameter)
            Dim CreatedBy_parameter = New SqlParameter("@CreatedBy", SqlDbType.Int)
            CreatedBy_parameter.Value = entity.CreatedBy
            paramList.Add(CreatedBy_parameter)
            Dim CreatedDate_parameter = New SqlParameter("@CreatedDate", SqlDbType.DateTime)
            CreatedDate_parameter.Value = entity.CreatedDate
            paramList.Add(CreatedDate_parameter)
            Dim UpdatedBy_parameter = New SqlParameter("@UpdatedBy", SqlDbType.Int)
            UpdatedBy_parameter.Value = entity.UpdatedBy
            paramList.Add(UpdatedBy_parameter)
            Dim UpdatedDate_parameter = New SqlParameter("@UpdatedDate", SqlDbType.DateTime)
            UpdatedDate_parameter.Value = entity.UpdatedDate
            'If entity.UpdatedDate = Nothing Then
            '    UpdatedDate_parameter.Value = DBNull.Value
            'End If

            paramList.Add(UpdatedDate_parameter)
            Dim Jobnumber_parameter As New SqlParameter("@Jobnumber", SqlDbType.NVarChar, 100)
            Jobnumber_parameter.Value = entity.Jobnumber
            paramList.Add(Jobnumber_parameter)
            Dim sql As String = ""
            Dim identityParameter As New SqlParameter("@IdentityId", SqlDbType.Int)
            If (entity.Id = -1) Then
                identityParameter.Direction = ParameterDirection.Output
                paramList.Add(identityParameter)
                sql = "insert into t_PMS_ProposalStage(StageNumber,StageName,Description,CreatedBy,CreatedDate,UpdatedBy,UpdatedDate,Jobnumber) "
                sql += "values(@StageNumber,@StageName,@Description,@CreatedBy,@CreatedDate,@UpdatedBy,@UpdatedDate,@Jobnumber) Select @IdentityId = @@identity  "
            Else
                paramList.Add(Id_parameter)
                sql = "update t_PMS_ProposalStage set StageNumber = @StageNumber,StageName = @StageName,Description = @Description,CreatedBy = @CreatedBy,CreatedDate = @CreatedDate,UpdatedBy = @UpdatedBy,UpdatedDate = @UpdatedDate,Jobnumber = @Jobnumber where Id =@Id"
            End If
            Dim count As Integer
            count = Me.ExecuteNonQuery(sql, paramList.ToArray())
            If (entity.Id = -1) Then
                If Not identityParameter Is Nothing Then
                    entity.Id = Integer.Parse(identityParameter.Value)
                End If
            End If
            Return count
        End Function

        Public Overridable Function GetEntityById(ByVal Id As Integer) As PMS_ProposalStage Implements IPMS_ProposalStage.GetEntityById
            Dim param As New SqlParameter("@Id", SqlDbType.Int)
            param.Value = Id
            Dim strSQL As String = "select * from [t_PMS_ProposalStage] where Id = @Id "
            Dim dr As SqlClient.SqlDataReader
            Try
                dr = Me.ExecuteReader(CommandType.Text, strSQL, param)
                If (dr.Read()) Then
                    Dim entity As New PMS_ProposalStage
                    ColumnMappingManage.MappingEntityByDataReader(Of PMS_ProposalStage)(entity, dr)
                    Return entity
                Else
                    Return Nothing
                End If
            Catch ex As Exception
                Return Nothing
            Finally
                If (Not dr.IsClosed) Then
                    dr.Close()
                End If
            End Try
        End Function

        Public Overridable Sub DeleteEntity(ByVal Id As Integer) Implements IPMS_ProposalStage.DeleteEntity
            Try
                stageFactory.BeginTransaction()
                'delete city coverage
                Dim strSql As String = "delete from dbo.t_PMS_CityCoverage where componentid in(select id from dbo.t_PMS_Component where stageid=" + Id.ToString + ")"
                Me.ExecuteNonQuery(strSql)
                'delete component
                strSql = "delete from dbo.t_PMS_Component where stageid=" + Id.ToString
                Me.ExecuteNonQuery(strSql)
                'delete timing
                strSql = "delete from dbo.t_PMS_Timing where stageid=" + Id.ToString
                Me.ExecuteNonQuery(strSql)
                'delete quotation
                strSql = "delete from dbo.t_PMS_Quotation where stageid=" + Id.ToString
                Me.ExecuteNonQuery(strSql)

                strSql = "delete from t_PMS_ProposalStage where Id= @Id"
                Dim idParameter As New SqlParameter
                idParameter.ParameterName = "@id"
                idParameter.Value = Id
                Me.ExecuteNonQuery(strSql, idParameter)
                stageFactory.Commit()
            Catch ex As Exception
                stageFactory.Rollback()
            End Try
            'Dim strSql As String = "delete from t_PMS_ProposalStage where Id= @Id"
            'Dim parameter As New SqlParameter
            'parameter.ParameterName = "@Id"
            'parameter.Value = Id
            'Me.ExecuteNonQuery(strSql, parameter)
        End Sub
        
        Public Overridable Function GetEntityDataSet() As Dataset Implements IPMS_ProposalStage.GetEntityDataSet
            Dim sql As String = "select * from [t_PMS_ProposalStage] "
            Dim ds As DataSet = Me.ExecuteDataSet(CommandType.Text, sql)
            Return ds
        End Function
        
        Public Overridable Function GetEntityList() As List(Of PMS_ProposalStage) Implements IPMS_ProposalStage.GetEntityList
            Dim strSQL As String = "select * from [t_PMS_ProposalStage] "
            Dim dr As SqlClient.SqlDataReader
            Try
               dr = Me.ExecuteReader(CommandType.Text, strSQL)
               Dim entityList As New List(Of PMS_ProposalStage)
               ColumnMappingManage.MappingListByDataReader(entityList, dr)
               Return entityList
            Catch ex As Exception
               Return Nothing
            Finally
               If (Not dr.IsClosed) Then
                   dr.Close()
               End If
            End Try
        End Function
        Public Overridable Function GetStageByProposalId(ByVal id As String) As List(Of PMS_ProposalStage) Implements IPMS_ProposalStage.GetStageByProposalId
            Dim param As New SqlParameter("@JobNumber", id)

            Dim strSQL As String = "select * from [t_PMS_ProposalStage] where JobNumber = @JobNumber order by StageNumber"
            Dim dr As SqlClient.SqlDataReader
            Try
                dr = Me.ExecuteReader(CommandType.Text, strSQL, param)

                Dim entityList As New List(Of PMS_ProposalStage)
                ColumnMappingManage.MappingListByDataReader(entityList, dr)
                Return entityList
             
            Catch ex As Exception
                Return Nothing
            Finally
                If (Not dr.IsClosed) Then
                    dr.Close()
                End If
            End Try
        End Function
    End Class
End Namespace
