'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.225
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports DataAccess.Components
Imports DataAccess.IDAL
Imports DataAccess.Model
Imports Microsoft.ApplicationBlocks.Data
Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports System.Text
Imports Utils

Namespace SQLServerDAL
    
    Friend Class PMS_ProjectQuotationDAO
        Inherits BaseSqlServerDAO
        Implements IPMS_ProjectQuotation

        Public Sub New(ByVal factory As SqlServerFactory)
            MyBase.New(factory)
        End Sub

        Public Overridable Function SaveEntity(ByVal entity As PMS_ProjectQuotation) As Integer Implements IPMS_ProjectQuotation.SaveEntity
            Dim paramList As New List(Of SqlParameter)
            Dim Id_parameter = New SqlParameter("@Id", SqlDbType.Int)
            If entity.Id > 0 Then
                Id_parameter.Value = entity.Id
            Else
                Id_parameter.Value = DBNull.Value
            End If
            Dim ProposalId_parameter = New SqlParameter("@ProposalId", SqlDbType.Int)
            ProposalId_parameter.Value = entity.ProposalId
            paramList.Add(ProposalId_parameter)
            Dim StageId_parameter = New SqlParameter("@StageId", SqlDbType.Int)
            StageId_parameter.Value = entity.StageId
            paramList.Add(StageId_parameter)
            Dim componentId_parameter = New SqlParameter("@componentId", SqlDbType.Int)
            componentId_parameter.Value = entity.componentId
            paramList.Add(componentId_parameter)
            Dim CreatedBy_parameter = New SqlParameter("@CreatedBy", SqlDbType.Int)
            CreatedBy_parameter.Value = entity.CreatedBy
            paramList.Add(CreatedBy_parameter)
            Dim CreatedDate_parameter = New SqlParameter("@CreatedDate", SqlDbType.DateTime)

            CreatedDate_parameter.Value = entity.CreatedDate
            paramList.Add(CreatedDate_parameter)
            Dim UpdatedBy_parameter = New SqlParameter("@UpdatedBy", SqlDbType.Int)
            UpdatedBy_parameter.Value = entity.UpdatedBy
            paramList.Add(UpdatedBy_parameter)
            Dim UpdatedDate_parameter = New SqlParameter("@UpdatedDate", SqlDbType.DateTime)

            UpdatedDate_parameter.Value = entity.UpdatedDate
            paramList.Add(UpdatedDate_parameter)
            Dim Task_parameter As New SqlParameter("@Task", SqlDbType.NVarChar, 200)
            Task_parameter.Value = entity.Task
            paramList.Add(Task_parameter)
            Dim Option1Fee_parameter = New SqlParameter("@Option1Fee", SqlDbType.Decimal)
            Option1Fee_parameter.Value = entity.Option1Fee
            paramList.Add(Option1Fee_parameter)
            Dim Optional2Fee_parameter = New SqlParameter("@Option2Fee", SqlDbType.Decimal)
            Optional2Fee_parameter.Value = entity.Option2Fee
            paramList.Add(Optional2Fee_parameter)
            Dim QuotationType_parameter As New SqlParameter("@QuotationType", SqlDbType.NVarChar, 20)
            QuotationType_parameter.Value = entity.QuotationType
            paramList.Add(QuotationType_parameter)
            Dim TaskOrder_parameter = New SqlParameter("@TaskOrder", SqlDbType.Int)
            TaskOrder_parameter.Value = entity.TaskOrder
            paramList.Add(TaskOrder_parameter)
            'Dim TaskType_parameter = New SqlParameter("@TaskType", SqlDbType.Int)
            'TaskType_parameter.Value = entity.TaskType
            'paramList.Add(TaskType_parameter)
            Dim Jobnumber_parameter As New SqlParameter("@Jobnumber", SqlDbType.NVarChar, 50)
            Jobnumber_parameter.Value = entity.Jobnumber
            paramList.Add(Jobnumber_parameter)
            ' add status column on 2011/12/5
            Dim Status_parameter As New SqlParameter("@Status", SqlDbType.NVarChar, 10)
            Status_parameter.Value = entity.Status
            paramList.Add(Status_parameter)
            Dim ActuralFee_parameter = New SqlParameter("@ActuralFee", SqlDbType.Decimal)
            ActuralFee_parameter.Value = entity.ActuralFee
            paramList.Add(ActuralFee_parameter)
            Dim sql As String = ""
            Dim identityParameter As New SqlParameter("@IdentityId", SqlDbType.Int)
            If (entity.Id = -1) Then
                identityParameter.Direction = ParameterDirection.Output
                paramList.Add(identityParameter)
                sql = "insert into t_PMS_Project_Quotation(ProposalId,StageId,componentId,CreatedBy,CreatedDate,UpdatedBy,UpdatedDate,Task,Option1Fee,Option2Fee,QuotationType,TaskOrder,Jobnumber,Status,ActuralFee) "
                sql += "values(@ProposalId,@StageId,@componentId,@CreatedBy,@CreatedDate,@UpdatedBy,@UpdatedDate,@Task,@Option1Fee,@Option2Fee,@QuotationType,@TaskOrder,@Jobnumber,@Status,@ActuralFee) Select @IdentityId = @@identity  "
            Else
                paramList.Add(Id_parameter)
                sql = "update t_PMS_Project_Quotation set ProposalId = @ProposalId,StageId = @StageId,componentId = @componentId,CreatedBy = @CreatedBy,CreatedDate = @CreatedDate,UpdatedBy = @UpdatedBy,UpdatedDate = @UpdatedDate,Task = @Task,Option1Fee = @Option1Fee,Option2Fee = @Option2Fee,QuotationType = @QuotationType,TaskOrder = @TaskOrder,Jobnumber = @Jobnumber,Status=@Status,ActuralFee=@ActuralFee where Id =@Id"
            End If
            Dim count As Integer
            count = Me.ExecuteNonQuery(sql, paramList.ToArray())
            If (entity.Id = -1) Then
                If Not identityParameter Is Nothing Then
                    entity.Id = Integer.Parse(identityParameter.Value)
                End If
            End If
            Return count
        End Function

        Public Overridable Function GetEntityById(ByVal Id As Integer) As PMS_ProjectQuotation Implements IPMS_ProjectQuotation.GetEntityById
            Dim param As New SqlParameter("@Id", SqlDbType.Int)
            param.Value = Id
            Dim strSQL As String = "select * from [t_PMS_Project_Quotation] where Id = @Id "
            Dim dr As SqlClient.SqlDataReader
            Try
                dr = Me.ExecuteReader(CommandType.Text, strSQL, param)
                If (dr.Read()) Then
                    Dim entity As New PMS_ProjectQuotation
                    ColumnMappingManage.MappingEntityByDataReader(Of PMS_ProjectQuotation)(entity, dr)
                    Return entity
                Else
                    Return Nothing
                End If
            Catch ex As Exception
                Return Nothing
            Finally
                If (Not dr.IsClosed) Then
                    dr.Close()
                End If
            End Try
        End Function

        Public Overridable Sub DeleteEntity(ByVal Id As Integer) Implements IPMS_ProjectQuotation.DeleteEntity
            Dim strSql As String = "delete from t_PMS_Project_Quotation where Id= @Id"
            Dim parameter As New SqlParameter
            parameter.ParameterName = "@Id"
            parameter.Value = Id
            Me.ExecuteNonQuery(strSql, parameter)
        End Sub

        Public Overridable Function GetEntityDataSet() As DataSet Implements IPMS_ProjectQuotation.GetEntityDataSet
            Dim sql As String = "select * from [t_PMS_Project_Quotation] "
            Dim ds As DataSet = Me.ExecuteDataSet(CommandType.Text, sql)
            Return ds
        End Function

        Public Overridable Function GetEntityList() As List(Of PMS_ProjectQuotation) Implements IPMS_ProjectQuotation.GetEntityList
            Dim strSQL As String = "select * from [t_PMS_Project_Quotation] "
            Dim dr As SqlClient.SqlDataReader
            Try
                dr = Me.ExecuteReader(CommandType.Text, strSQL)
                Dim entityList As New List(Of PMS_ProjectQuotation)
                ColumnMappingManage.MappingListByDataReader(entityList, dr)
                Return entityList
            Catch ex As Exception
                Return Nothing
            Finally
                If (Not dr.IsClosed) Then
                    dr.Close()
                End If
            End Try
        End Function
        Public Function GetQuotationListByJobNumber(ByVal jobNumber As String) As List(Of PMS_ProjectQuotation) Implements IPMS_ProjectQuotation.GetQuotationListByJobNumber
            Dim strSQL As String = "select t_PMS_Project_Quotation.*,StageName,StageNumber,t_PMS_Component.ComponentName  from t_PMS_Project_Quotation left join t_PMS_ProposalStage on t_PMS_Project_Quotation.StageId = t_PMS_ProposalStage.Id "
            strSQL += " left join dbo.t_PMS_Component on t_PMS_Project_Quotation.componentId  = t_PMS_Component.id where t_PMS_Project_Quotation.Status='Active' and t_PMS_Project_Quotation.Jobnumber='" + jobNumber + "' order by StageNumber,componentId"
            Dim dr As SqlClient.SqlDataReader
            Try
                dr = Me.ExecuteReader(CommandType.Text, strSQL)
                Dim entityList As New List(Of PMS_ProjectQuotation)
                ColumnMappingManage.MappingListByDataReader(entityList, dr)
                Return entityList
            Catch ex As Exception
                Return Nothing
            Finally
                If (Not dr.IsClosed) Then
                    dr.Close()
                End If
            End Try
        End Function
        Public Overridable Function CreateProjectQuotationByProposal(ByVal jobNumber As String) As Boolean Implements IPMS_ProjectQuotation.CreateProjectQuotationByProposal
            Dim jobNumberParameter As New SqlParameter
            jobNumberParameter.ParameterName = "@JobNumber"
            jobNumberParameter.Value = jobNumber
            Dim strSQL = "insert into t_PMS_Project_Quotation(ProposalId,StageId,componentId,CreatedBy,CreatedDate,UpdatedBy,UpdatedDate,Task,Option1Fee,Option2Fee,QuotationType,TaskOrder,Jobnumber,Status,ActuralFee)"
            strSQL += " select ProposalId,StageId,componentId,CreatedBy,CreatedDate,UpdatedBy,UpdatedDate,Task,Option1Fee,Option2Fee,QuotationType,TaskOrder,Jobnumber,Status,ActuralFee from  dbo.t_PMS_Quotation where Jobnumber = @JobNumber"
            Try
                Dim count As Integer
                count = Me.ExecuteNonQuery(strSQL, jobNumberParameter)
                Return count > 0
            Catch ex As Exception
                Return False
            End Try
        End Function
    End Class
End Namespace
