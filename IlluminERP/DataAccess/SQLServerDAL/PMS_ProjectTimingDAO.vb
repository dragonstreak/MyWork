'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.225
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports DataAccess.Components
Imports DataAccess.IDAL
Imports DataAccess.Model
Imports Microsoft.ApplicationBlocks.Data
Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports System.Text
Imports Utils

Namespace SQLServerDAL
    
    Friend Class PMS_ProjectTimingDAO
        Inherits BaseSqlServerDAO
        Implements IPMS_ProjectTiming

        Public Sub New(ByVal factory As SqlServerFactory)
            MyBase.New(factory)
        End Sub

        Public Overridable Function SaveEntity(ByVal entity As PMS_ProjectTiming) As Integer Implements IPMS_ProjectTiming.SaveEntity
            Dim paramList As New List(Of SqlParameter)
            Dim Id_parameter = New SqlParameter("@Id", SqlDbType.Int)
            If entity.Id > 0 Then
                Id_parameter.Value = entity.Id
            Else
                Id_parameter.Value = DBNull.Value
            End If
            Dim ProposalId_parameter = New SqlParameter("@ProposalId", SqlDbType.Int)
            ProposalId_parameter.Value = entity.ProposalId
            paramList.Add(ProposalId_parameter)
            Dim StageId_parameter = New SqlParameter("@StageId", SqlDbType.Int)
            StageId_parameter.Value = entity.StageId
            paramList.Add(StageId_parameter)
            Dim componentId_parameter = New SqlParameter("@componentId", SqlDbType.Int)
            componentId_parameter.Value = entity.componentId
            paramList.Add(componentId_parameter)
            Dim CreatedBy_parameter = New SqlParameter("@CreatedBy", SqlDbType.Int)
            CreatedBy_parameter.Value = entity.CreatedBy
            paramList.Add(CreatedBy_parameter)
            Dim CreatedDate_parameter = New SqlParameter("@CreatedDate", SqlDbType.DateTime)

            CreatedDate_parameter.Value = entity.CreatedDate
            paramList.Add(CreatedDate_parameter)
            Dim UpdatedBy_parameter = New SqlParameter("@UpdatedBy", SqlDbType.Int)
            UpdatedBy_parameter.Value = entity.UpdatedBy
            paramList.Add(UpdatedBy_parameter)
            Dim UpdatedDate_parameter = New SqlParameter("@UpdatedDate", SqlDbType.DateTime)

            UpdatedDate_parameter.Value = entity.UpdatedDate
            paramList.Add(UpdatedDate_parameter)
            Dim Task_parameter As New SqlParameter("@Task", SqlDbType.NVarChar, 200)
            Task_parameter.Value = entity.Task
            paramList.Add(Task_parameter)
            Dim StartDate_parameter = New SqlParameter("@StartDate", SqlDbType.DateTime)

            StartDate_parameter.Value = entity.StartDate
            paramList.Add(StartDate_parameter)
            Dim EndDate_parameter = New SqlParameter("@EndDate", SqlDbType.DateTime)

            EndDate_parameter.Value = entity.EndDate
            paramList.Add(EndDate_parameter)
            Dim QuotationType_parameter As New SqlParameter("@TaskType", SqlDbType.NVarChar, 20)
            QuotationType_parameter.Value = entity.TaskType
            paramList.Add(QuotationType_parameter)
            Dim DayCount_parameter = New SqlParameter("@DayCount", SqlDbType.Int)
            DayCount_parameter.Value = entity.DayCount
            paramList.Add(DayCount_parameter)
            Dim WeekCount_parameter As New SqlParameter("@WeekCount", SqlDbType.NVarChar, 9)
            WeekCount_parameter.Value = entity.WeekCount
            paramList.Add(WeekCount_parameter)
            Dim TaskOrder_parameter = New SqlParameter("@TaskOrder", SqlDbType.Int)
            TaskOrder_parameter.Value = entity.TaskOrder
            paramList.Add(TaskOrder_parameter)
            Dim Jobnumber_parameter As New SqlParameter("@Jobnumber", SqlDbType.NVarChar, 50)
            Jobnumber_parameter.Value = entity.Jobnumber
            paramList.Add(Jobnumber_parameter)
            ' add status column on 2011/12/5
            Dim Status_parameter As New SqlParameter("@Status", SqlDbType.NVarChar, 10)
            Status_parameter.Value = entity.Status
            paramList.Add(Status_parameter)
            Dim sql As String = ""
            Dim identityParameter As New SqlParameter("@IdentityId", SqlDbType.Int)
            If (entity.Id = -1) Then
                identityParameter.Direction = ParameterDirection.Output
                paramList.Add(identityParameter)
                sql = "insert into t_PMS_Project_Timing(ProposalId,StageId,componentId,CreatedBy,CreatedDate,UpdatedBy,UpdatedDate,Task,StartDate,EndDate,TaskType,DayCount,WeekCount,TaskOrder,Jobnumber,Status) "
                sql += "values(@ProposalId,@StageId,@componentId,@CreatedBy,@CreatedDate,@UpdatedBy,@UpdatedDate,@Task,@StartDate,@EndDate,@TaskType,@DayCount,@WeekCount,@TaskOrder,@Jobnumber,@Status) Select @IdentityId = @@identity  "
            Else
                paramList.Add(Id_parameter)
                sql = "update t_PMS_Project_Timing set ProposalId = @ProposalId,StageId = @StageId,componentId = @componentId,CreatedBy = @CreatedBy,CreatedDate = @CreatedDate,UpdatedBy = @UpdatedBy,UpdatedDate = @UpdatedDate,Task = @Task,StartDate = @StartDate,EndDate = @EndDate,TaskType = @TaskType,DayCount = @DayCount,WeekCount = @WeekCount,TaskOrder = @TaskOrder,Jobnumber = @Jobnumber,Status=@Status where Id =@Id"
            End If
            Dim count As Integer
            count = Me.ExecuteNonQuery(sql, paramList.ToArray())
            If (entity.Id = -1) Then
                If Not identityParameter Is Nothing Then
                    entity.Id = Integer.Parse(identityParameter.Value)
                End If
            End If
            Return count
        End Function

        Public Overridable Function GetEntityById(ByVal Id As Integer) As PMS_ProjectTiming Implements IPMS_ProjectTiming.GetEntityById
            Dim param As New SqlParameter("@Id", SqlDbType.Int)
            param.Value = Id
            Dim strSQL As String = "select * from [t_PMS_Project_Timing] where Id = @Id "
            Dim dr As SqlClient.SqlDataReader
            Try
                dr = Me.ExecuteReader(CommandType.Text, strSQL, param)
                If (dr.Read()) Then
                    Dim entity As New PMS_ProjectTiming
                    ColumnMappingManage.MappingEntityByDataReader(Of PMS_ProjectTiming)(entity, dr)
                    Return entity
                Else
                    Return Nothing
                End If
            Catch ex As Exception
                Return Nothing
            Finally
                If (Not dr.IsClosed) Then
                    dr.Close()
                End If
            End Try
        End Function

        Public Overridable Sub DeleteEntity(ByVal Id As Integer) Implements IPMS_ProjectTiming.DeleteEntity
            Dim strSql As String = "delete from t_PMS_Project_Timing where Id= @Id"
            Dim parameter As New SqlParameter
            parameter.ParameterName = "@Id"
            parameter.Value = Id
            Me.ExecuteNonQuery(strSql, parameter)
        End Sub

        Public Overridable Function GetEntityDataSet() As DataSet Implements IPMS_ProjectTiming.GetEntityDataSet
            Dim sql As String = "select * from [t_PMS_Project_Timing] "
            Dim ds As DataSet = Me.ExecuteDataSet(CommandType.Text, sql)
            Return ds
        End Function

        Public Overridable Function GetEntityList() As List(Of PMS_ProjectTiming) Implements IPMS_ProjectTiming.GetEntityList
            Dim strSQL As String = "select * from [t_PMS_Project_Timing] "
            Dim dr As SqlClient.SqlDataReader
            Try
                dr = Me.ExecuteReader(CommandType.Text, strSQL)
                Dim entityList As New List(Of PMS_ProjectTiming)
                ColumnMappingManage.MappingListByDataReader(entityList, dr)
                Return entityList
            Catch ex As Exception
                Return Nothing
            Finally
                If (Not dr.IsClosed) Then
                    dr.Close()
                End If
            End Try
        End Function
        Public Function GetTimingListByJobNumber(ByVal jobNumber As String) As List(Of PMS_ProjectTiming) Implements IPMS_ProjectTiming.GetTimingListByJobNumber
            Dim strSQL As String = "select t_PMS_Project_Timing.*,StageName,StageNumber,ComponentName from t_PMS_Project_Timing left join t_PMS_ProposalStage on t_PMS_Project_Timing.StageId =t_PMS_ProposalStage.Id"
            strSQL += " left join dbo.t_PMS_Component on t_PMS_Project_Timing.componentId  = t_PMS_Component.id where  t_PMS_Project_Timing.Status='Active' and t_PMS_Project_Timing.Jobnumber='" + jobNumber + "' order by StageNumber,componentId,taskOrder"
            Dim dr As SqlClient.SqlDataReader
            Try
                dr = Me.ExecuteReader(CommandType.Text, strSQL)
                Dim entityList As New List(Of PMS_ProjectTiming)
                ColumnMappingManage.MappingListByDataReader(entityList, dr)
                Return entityList
            Catch ex As Exception
                Return Nothing
            Finally
                If (Not dr.IsClosed) Then
                    dr.Close()
                End If
            End Try
        End Function
        Public Overridable Function CreateProjectTimingByProposal(ByVal jobNumber As String) As Boolean Implements IPMS_ProjectTiming.CreateProjectTimingByProposal
            Dim jobNumberParameter As New SqlParameter
            jobNumberParameter.ParameterName = "@JobNumber"
            jobNumberParameter.Value = jobNumber
            Dim strSQL = "insert into t_PMS_Project_Timing (ProposalId,StageId,componentId ,CreatedBy,CreatedDate,UpdatedBy,UpdatedDate,Task,StartDate,EndDate,TaskType,DayCount,WeekCount,TaskOrder,Jobnumber,[Status])"
            strSQL += " select ProposalId,StageId,componentId ,CreatedBy,CreatedDate,UpdatedBy,UpdatedDate,Task,StartDate,EndDate,TaskType,DayCount,WeekCount,TaskOrder,Jobnumber,[Status]	from t_PMS_Timing where Jobnumber = @JobNumber"
            Try
                Dim count As Integer
                count = Me.ExecuteNonQuery(strSQL, jobNumberParameter)
                Return count > 0
            Catch ex As Exception
                Return False
            End Try
        End Function
        Public Overridable Function GetUserPriodProjectTiming(ByVal userId As Integer, ByVal beginDate As Date?, ByVal endDate As Date?) As List(Of PMS_ProjectTiming) Implements IPMS_ProjectTiming.GetUserPriodProjectTiming
            Dim beginTimeParameter As SqlParameter = New SqlParameter("@BeginDate", SqlDbType.DateTime)
            'beginTimeParameter.ParameterName = "@BeginDate"
            beginTimeParameter.Value = beginDate
            'beginTimeParameter.DbType = SqlDbType.DateTime
            Dim endTimeParameter As SqlParameter = New SqlParameter("@EndDate", SqlDbType.DateTime)
            'endTimeParameter.ParameterName = "@EndDate"
            'end date should be the date next the end date because enddate will be the 0:0 in one day.
            If endDate.HasValue Then
                endDate = endDate.Value.AddDays(1)
            End If
            endTimeParameter.Value = endDate
            'endTimeParameter.DbType = SqlDbType.DateTime
            Dim userIdParameter As New SqlParameter
            userIdParameter.ParameterName = "@UserId"
            userIdParameter.Value = userId

            Dim strSQL = "select * from t_PMS_Project_Timing"
            'exclude the timing which startdate after @enddate or enddate earlier than @ebindate
            strSQL += " where not ((StartDate is not null and StartDate >@EndDate) "
            strSQL += " or (EndDate is not null and EndDate <@BeginDate))"
            'strSQL += " where (StartDate is  null or StartDate>@BeginDate)"
            'strSQL += " and (EndDate is null or EndDate <@EndDate) "
            strSQL += " and exists(select 1 from t_PMS_ProposalUserInfo where UserId=@UserId"
            strSQL += " and ProId in(select id from t_PMS_ProposalInfo where t_PMS_ProposalInfo.JobNumber = t_PMS_Project_Timing.Jobnumber))"

            Dim dr As SqlClient.SqlDataReader
            Try
                dr = Me.ExecuteReader(CommandType.Text, strSQL, beginTimeParameter, endTimeParameter, userIdParameter)
                Dim entityList As New List(Of PMS_ProjectTiming)
                ColumnMappingManage.MappingListByDataReader(entityList, dr)
                Return entityList
            Catch ex As Exception
                Return Nothing
            Finally
                If (Not dr.IsClosed) Then
                    dr.Close()
                End If
            End Try

        End Function
    End Class
End Namespace
