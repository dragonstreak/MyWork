'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.225
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports DataAccess.Components
Imports DataAccess.IDAL
Imports DataAccess.Model
Imports Microsoft.ApplicationBlocks.Data
Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports System.Text
Imports Utils

Namespace SQLServerDAL
    
    Friend Class PMS_ComponentDAO
        Inherits BaseSqlServerDAO
        Implements IPMS_Component
        
        Public Sub New(ByVal factory As SqlServerFactory)
            MyBase.New(factory)
        End Sub
        
        Public Overridable Function SaveEntity(ByVal entity As PMS_Component) As Integer Implements IPMS_Component.SaveEntity
            Dim paramList As New List(Of SqlParameter)
            Dim id_parameter = New SqlParameter("@id", SqlDbType.Int)
            If entity.id > 0 Then
                id_parameter.Value = entity.id
            Else
                id_parameter.Value = DBNull.Value
            End If
            Dim StageId_parameter = New SqlParameter("@StageId", SqlDbType.Int)
            StageId_parameter.Value = entity.StageId
            paramList.Add(StageId_parameter)
            Dim KeyWords_parameter As New SqlParameter("@KeyWords", SqlDbType.NVarChar, 1000)
            KeyWords_parameter.Value = entity.KeyWords
            paramList.Add(KeyWords_parameter)
            Dim ComponentName_parameter As New SqlParameter("@ComponentName", SqlDbType.VarChar, 1000)
            ComponentName_parameter.Value = entity.ComponentName
            paramList.Add(ComponentName_parameter)
            Dim SampleDesign_parameter As New SqlParameter("@SampleDesign", SqlDbType.NVarChar, 8000)
            SampleDesign_parameter.Value = entity.SampleDesign
            paramList.Add(SampleDesign_parameter)
            Dim SampleSize_parameter As New SqlParameter("@SampleSize", SqlDbType.NVarChar, 8000)
            SampleSize_parameter.Value = entity.SampleSize
            paramList.Add(SampleSize_parameter)
            Dim MethdologyType_parameter = New SqlParameter("@MethdologyType", SqlDbType.Int)
            MethdologyType_parameter.Value = entity.MethdologyType
            paramList.Add(MethdologyType_parameter)
            Dim Methodology_parameter = New SqlParameter("@Methodology", SqlDbType.Int)
            Methodology_parameter.Value = entity.Methodology
            paramList.Add(Methodology_parameter)
            
            Dim UpdatedBy_parameter = New SqlParameter("@UpdatedBy", SqlDbType.Int)
            UpdatedBy_parameter.Value = entity.UpdatedBy
            paramList.Add(UpdatedBy_parameter)
            Dim UpdatedDate_parameter = New SqlParameter("@UpdatedDate", SqlDbType.DateTime)
            If (entity.UpdatedDate = DateTime.MinValue) Then
                UpdatedDate_parameter.Value = DBNull.Value
                UpdatedBy_parameter.Value = DBNull.Value
            Else
                UpdatedDate_parameter.Value = entity.UpdatedDate
            End If


            paramList.Add(UpdatedDate_parameter)
            Dim CreatedDate_parameter = New SqlParameter("@CreatedDate", SqlDbType.DateTime)
            CreatedDate_parameter.Value = entity.CreatedDate
            paramList.Add(CreatedDate_parameter)
            Dim CreatedBy_parameter = New SqlParameter("@CreatedBy", SqlDbType.Int)
            CreatedBy_parameter.Value = entity.CreatedBy
            paramList.Add(CreatedBy_parameter)
            Dim Jobnumber_parameter As New SqlParameter("@Jobnumber", SqlDbType.NVarChar, 50)
            Jobnumber_parameter.Value = entity.Jobnumber
            paramList.Add(Jobnumber_parameter)
            Dim sql As String = ""
            Dim identityParameter As New SqlParameter("@IdentityId", SqlDbType.Int)
            If (entity.id = -1) Then
                identityParameter.Direction = ParameterDirection.Output
                paramList.Add(identityParameter)
                sql = "insert into t_PMS_Component(StageId,KeyWords,ComponentName,SampleDesign,SampleSize,MethdologyType,Methodology,UpdatedDate,UpdatedBy,CreatedDate,CreatedBy,Jobnumber) "
                sql += "values(@StageId,@KeyWords,@ComponentName,@SampleDesign,@SampleSize,@MethdologyType,@Methodology,@UpdatedDate,@UpdatedBy,@CreatedDate,@CreatedBy,@Jobnumber) Select @IdentityId = @@identity  "
            Else
                paramList.Add(id_parameter)
                sql = "update t_PMS_Component set StageId = @StageId,KeyWords = @KeyWords,ComponentName=@ComponentName,SampleDesign = @SampleDesign,SampleSize = @SampleSize,MethdologyType = @MethdologyType,Methodology = @Methodology,UpdatedDate = @UpdatedDate,UpdatedBy = @UpdatedBy,CreatedDate = @CreatedDate,CreatedBy = @CreatedBy,Jobnumber = @Jobnumber where id =@id"
            End If
            Dim count As Integer
            count = Me.ExecuteNonQuery(sql, paramList.ToArray())
            If (entity.id = -1) Then
                If Not identityParameter Is Nothing Then
                    entity.id = Integer.Parse(identityParameter.Value)
                End If
            End If
            Return count
        End Function
        
        Public Overridable Function GetEntityById(ByVal Id As Integer) As PMS_Component Implements IPMS_Component.GetEntityById
            Dim param As New SqlParameter("@id", SqlDbType.Int)
            param.Value = Id
            Dim strSQL As String = "select * from [t_PMS_Component] where id = @id "
            Dim dr As SqlClient.SqlDataReader
            Try
               dr = Me.ExecuteReader(CommandType.Text, strSQL, param)
               If (dr.Read()) Then
                   Dim entity As New PMS_Component
                   ColumnMappingManage.MappingEntityByDataReader(Of PMS_Component)(entity, dr)
                   Return entity
               Else
                   Return Nothing
               End If
            Catch ex As Exception
               Return Nothing
            Finally
               If (Not dr.IsClosed) Then
                   dr.Close()
               End If
            End Try
        End Function
        
        Public Overridable Sub DeleteEntity(ByVal id As Integer) Implements IPMS_Component.DeleteEntity
             Dim strSql As String = "delete from t_PMS_Component where id= @id
            Dim parameter As New SqlParameter
            parameter.ParameterName = "@id"
            parameter.Value = id
            Me.ExecuteNonQuery(strSql, parameter)
        End Sub
        
        Public Overridable Function GetEntityDataSet() As Dataset Implements IPMS_Component.GetEntityDataSet
            Dim sql As String = "select * from [t_PMS_Component] "
            Dim ds As DataSet = Me.ExecuteDataSet(CommandType.Text, sql)
            Return ds
        End Function
        
        Public Overridable Function GetEntityList() As List(Of PMS_Component) Implements IPMS_Component.GetEntityList
            Dim strSQL As String = "select * from [t_PMS_Component] "
            Dim dr As SqlClient.SqlDataReader
            Try
               dr = Me.ExecuteReader(CommandType.Text, strSQL)
               Dim entityList As New List(Of PMS_Component)
               ColumnMappingManage.MappingListByDataReader(entityList, dr)
               Return entityList
            Catch ex As Exception
               Return Nothing
            Finally
               If (Not dr.IsClosed) Then
                   dr.Close()
               End If
            End Try
        End Function
        Public Overridable Function SaveComponent(ByVal entity As PMS_Component) As Integer Implements IPMS_Component.SaveComponent
            Dim paramList As New List(Of SqlParameter)
            Dim id_parameter = New SqlParameter("@id", SqlDbType.Int)
            If entity.id > 0 Then
                id_parameter.Value = entity.id
            Else
                id_parameter.Value = DBNull.Value
            End If
            Dim StageId_parameter = New SqlParameter("@StageId", SqlDbType.Int)
            StageId_parameter.Value = entity.StageId
            paramList.Add(StageId_parameter)
            Dim KeyWords_parameter As New SqlParameter("@KeyWords", SqlDbType.NVarChar, 1000)
            KeyWords_parameter.Value = entity.KeyWords
            paramList.Add(KeyWords_parameter)
            Dim ComponentName_parameter As New SqlParameter("@ComponentName", SqlDbType.NVarChar, 1000)
            ComponentName_parameter.Value = entity.ComponentName
            paramList.Add(ComponentName_parameter)
            Dim SampleDesign_parameter As New SqlParameter("@SampleDesign", SqlDbType.NVarChar, 8000)
            SampleDesign_parameter.Value = entity.SampleDesign
            paramList.Add(SampleDesign_parameter)
            Dim SampleSize_parameter As New SqlParameter("@SampleSize", SqlDbType.NVarChar, 8000)
            SampleSize_parameter.Value = entity.SampleSize
            paramList.Add(SampleSize_parameter)
            Dim sql As String = ""
            Dim identityParameter As New SqlParameter("@IdentityId", SqlDbType.Int)
            If (entity.id = -1) Then
                identityParameter.Direction = ParameterDirection.Output
                paramList.Add(identityParameter)
                sql = "insert into t_PMS_Component(StageId,KeyWords,ComponentName,SampleDesign,SampleSize) "
                sql += "values(@StageId,@KeyWords,@ComponentName,@SampleDesign,@SampleSize) Select @IdentityId = @@identity  "
            Else
                paramList.Add(id_parameter)
                sql = "update t_PMS_Component set StageId = @StageId,KeyWords = @KeyWords,ComponentName=@ComponentName,SampleDesign = @SampleDesign,SampleSize = @SampleSize where id =@id"
            End If
            Dim count As Integer
            count = Me.ExecuteNonQuery(sql, paramList.ToArray())
            If (entity.id = -1) Then
                If Not identityParameter Is Nothing Then
                    entity.id = Integer.Parse(identityParameter.Value)
                End If
            End If
            'Save Methodology

            Return count
        End Function
        Public Function GetStageComponentList(ByVal stageId As Integer) As List(Of PMS_Component) Implements IPMS_Component.GetStageComponentList
            Dim strSQL As String = "select t_PMS_Component.*,t_Base_Methodology_Type.MethodologyType as MethodologyTypaName,t_Base_Methodology.Methodology as MethodologyName from dbo.t_PMS_Component left join t_Base_Methodology_Type  on t_PMS_Component.MethdologyType = t_Base_Methodology_Type.id Left Join  t_Base_Methodology on t_PMS_Component.Methodology=t_Base_Methodology. ID where StageId =" + stageId.ToString
            Dim dr As SqlClient.SqlDataReader
            Try
                dr = Me.ExecuteReader(CommandType.Text, strSQL)
                Dim entityList As New List(Of PMS_Component)
                ColumnMappingManage.MappingListByDataReader(entityList, dr)
                Return entityList
            Catch ex As Exception
                Return Nothing
            Finally
                If (Not dr.IsClosed) Then
                    dr.Close()
                End If
            End Try
        End Function
    End Class
End Namespace
