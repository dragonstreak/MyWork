'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports DataAccess.Components
Imports DataAccess.IDAL
Imports DataAccess.Model
Imports Microsoft.ApplicationBlocks.Data
Imports System
Imports System.Data
Imports System.Data.SqlClient
Imports System.Text

Namespace SQLServerDAL
    
    Friend Class Wcf_BehaviorExtensionDAO
        Inherits BaseSqlServerDAO
        Implements IWcf_BehaviorExtension
        
        Public Sub New(ByVal factory As SqlServerFactory)
            MyBase.New(factory)
        End Sub
        
        Public Overridable Function GetEntityById(ByVal Id As Integer) As Wcf_BehaviorExtensionInfo Implements IWcf_BehaviorExtension.GetEntityById
            Dim paramlevel As New SqlParameter("@ID", SqlDbType.Int)
            paramlevel.Value = Id
            Dim sql As String = "select * from [t_Wcf_BehaviorExtension] where ID = @ID "
            Dim ds As DataSet = Me.ExecuteDataSet(CommandType.Text, sql, paramlevel)
            If Not ds Is Nothing Then
                Return MapRowToEntityInfo(ds.Tables(0).Rows(0))
            Else
                Return Nothing
            End If
        End Function
        
        Public Overridable Sub DeleteEntityById(ByVal Id As Integer) Implements IWcf_BehaviorExtension.DeleteEntityById
            Dim strSql As String = "delete from t_Wcf_BehaviorExtension where id= @ID
            Dim parameter As New SqlParameter
            parameter.ParameterName = "@ID"
            parameter.Value = Id
            ExecuteNonQuery(strSql, parameter)
        End Sub
        
        Public Overridable Function GetEntityDataSet() As Dataset Implements IWcf_BehaviorExtension.GetEntityDataSet
            Dim sql As String = "select * from [t_Wcf_BehaviorExtension] "
            Dim ds As DataSet = Me.ExecuteDataSet(CommandType.Text, sql)
            Return ds
        End Function

        Public Overloads Function GetWCFBehaviorExtensionByName(ByVal extensionName As String) As Wcf_BehaviorExtensionInfo Implements IWcf_BehaviorExtension.GetWCFBehaviorExtensionByName
            Dim paramlevel As New SqlParameter("@ExtensionName", SqlDbType.VarChar)
            paramlevel.Value = extensionName
            Dim sql As String = "select * from [t_Wcf_BehaviorExtension] where ExtensionName = @ExtensionName "
            Dim ds As DataSet = Me.ExecuteDataSet(CommandType.Text, sql, paramlevel)
            If Not ds Is Nothing Then
                Return MapRowToEntityInfo(ds.Tables(0).Rows(0))
            Else
                Return Nothing
            End If
        End Function

        Public Function MapRowToEntityInfo(ByVal dr As DataRow) As Wcf_BehaviorExtensionInfo
            Dim entityInfo As New Wcf_BehaviorExtensionInfo

            entityInfo.Id = Convert.ToInt32(dr("ID"))

            If Not Convert.IsDBNull(dr("ExtensionName")) Then
                entityInfo.ExtensionName = Convert.ToInt32(dr("ExtensionName"))
            End If

            If Not Convert.IsDBNull(dr("SiteVersion")) Then
                entityInfo.SiteVersion = dr("SiteVersion").ToString()
            End If

            If Not Convert.IsDBNull(dr("AppCode")) Then
                entityInfo.AppCode = dr("AppCode").ToString()
            End If

            If Not Convert.IsDBNull(dr("BehaviorConfigurationElementType")) Then
                entityInfo.BehaviorConfigurationElementType = dr("BehaviorConfigurationElementType").ToString()
            End If

            If Not Convert.IsDBNull(dr("BehaviorType")) Then
                entityInfo.BehaviorType = dr("BehaviorType").ToString()
            End If

            If Not Convert.IsDBNull(dr("ConfigVersion")) Then
                entityInfo.ConfigVersion = dr("ConfigVersion").ToString()
            End If

            If Not Convert.IsDBNull(dr("InsertDate")) Then
                entityInfo.InsertDate = Convert.ToDateTime(dr("InsertDate"))
            End If

            If Not Convert.IsDBNull(dr("InsertBy")) Then
                entityInfo.InsertBy = dr("InsertBy").ToString()
            End If

            If Not Convert.IsDBNull(dr("UpdateDate")) Then
                entityInfo.UpdateDate = Convert.ToDateTime(dr("UpdateDate"))
            End If

            If Not Convert.IsDBNull(dr("UpdateBy")) Then
                entityInfo.UpdateBy = dr("UpdateBy").ToString()
            End If

            Return entityInfo
        End Function

    End Class
End Namespace
